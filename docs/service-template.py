# =============================================================================
# üìÅ app/config/settings.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ `.env` –ø—Ä–∏ –ø–æ–º–æ—â–∏ pydantic‚Äësettings
#  ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º: –∫–ª—é—á–∏ API, —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —Ç–æ–∫–µ–Ω auth
#  ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª—É ¬´üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è¬ª –∏ —Ç–∞–±–ª–∏—Ü–∞–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
#    (Neo4j, Weaviate, OpenAI, Langfuse) –≤ specification.md
# =============================================================================

from pydantic_settings import BaseSettings


class AppSettings(BaseSettings):
    """–ì–ª–æ–±–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ StoryGraph.

    –ü–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é ¬´–º–∞–ø—è—Ç—Å—è¬ª –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ `.env`.
    –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è ‚Üí –æ–±–Ω–æ–≤–ª—è—Ç—å docker‚Äëcompose –∏ README.
    """

    # === –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã ===
    OPENAI_API_KEY: str  # OpenAI (SlotFiller)
    NEO4J_URI: str  # neo4j://host:port –∏–ª–∏ bolt://
    NEO4J_USER: str
    NEO4J_PASSWORD: str
    WEAVIATE_URL: str  # Weaviate (TemplateService)
    LANGFUSE_HOST: str | None = None
    LANGFUSE_PUBLIC: str | None = None
    LANGFUSE_SECRET: str | None = None

    # === –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ===
    AUTH_TOKEN: str  # –ü—Ä–æ—Å—Ç–æ–π Bearer‚Äë—Ç–æ–∫–µ–Ω (—Å–º. spec ¬´üîê¬ª)

    # === –°–µ—Ä–≤–∏—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
    DEBUG: bool = False

    class Config:
        env_file = ".env"  # –ß–∏—Ç–∞–µ–º –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞


app_settings = AppSettings()


# =============================================================================
# üìÅ app/core/auth.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é Bearer‚Äë–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –æ–ø–∏—Å–∞–Ω–Ω—É—é –≤ spec (¬´–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
#    FastAPI Depends¬ª).
#  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —ç–Ω–¥‚Äë–ø–æ–π–Ω—Ç–∞—Ö.
# =============================================================================

from fastapi import Depends, Header, HTTPException, status


def get_token_header(authorization: str = Header(...)) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Bearer‚Äë—Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization."""
    token = authorization.replace("Bearer ", "")
    if token != app_settings.AUTH_TOKEN:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid or missing token",
        )
    return token


# =============================================================================
# üìÅ app/schemas/extract.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ Pydantic‚Äë–º–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è `/v1/extract-save`
#  ‚Ä¢ –ü–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª—É ¬´–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª / extract-save¬ª
# =============================================================================

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any


class ExtractRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤."""

    text: str = Field(..., description="–§—Ä–∞–≥–º–µ–Ω—Ç 2‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    chapter: int = Field(..., description="–ù–æ–º–µ—Ä –≥–ª–∞–≤—ã (>=‚ÄØ1)")
    tags: Optional[List[str]] = Field(None, description="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")


class ExtractResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API: –ª–æ–≥ —É—Å–ø–µ—à–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫."""

    facts: List[Dict[str, Any]]
    inserted_ids: List[str]


# =============================================================================
# üìÅ app/services/graph_proxy.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Neo4j Python‚Äë–¥—Ä–∞–π–≤–µ—Ä–æ–º
#  ‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç Cypher‚Äë–∑–∞–ø—Ä–æ—Å—ã, –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏ DEBUG, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
# =============================================================================

from typing import Any, Dict, List
from neo4j import GraphDatabase, Driver


class GraphProxy:
    """–ö–æ–º–º—É–Ω–∏—Ü–∏—Ä—É–µ—Ç —Å Neo4j (—Å–º. README ¬ß2 ¬´GRAPH_PROXY¬ª)."""

    def __init__(self, uri: str, user: str, password: str):
        self._driver: Driver = GraphDatabase.driver(uri, auth=(user, password))

    def run_query(self, cypher: str, params: Dict[str, Any] | None = None) -> List:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç Cypher –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π."""
        if app_settings.DEBUG:
            print(">>> CYPHER\n", cypher, "\n<<<")

        with self._driver.session() as session:
            result = session.run(cypher, params or {})
            return [r.data() for r in result]


# =============================================================================
# üìÅ app/services/template_service.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –ü–æ–∏—Å–∫ `CypherTemplate` –≤ Weaviate –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
#  ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É TemplateService –≤ spec/README
# =============================================================================

import requests
from typing import List, Dict



class TemplateService:
    def __init__(self):
        self._data: dict[str, CypherTemplate] = {}

    def upsert(self, tpl: CypherTemplate):
        self._data[tpl.id] = tpl

    def get(self, tpl_id: str) -> CypherTemplate:
        return self._data[tpl_id]

    def top_k(self, query: str, group: str | None = None, k: int = 3):
        items = [t for t in self._data.values() if group is None or t.category == group]
        return items[:k]


# =============================================================================
# üìÅ app/services/slot_filler.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –ó–∞–ø–æ–ª–Ω—è–µ—Ç slot_schema —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ LLM
#  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞ –∏–∑ README ¬ß6: extract, fallback, generate
# =============================================================================

import openai


class SlotFiller:
    """LLM‚Äë–∫–ª–∏–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤."""

    def __init__(self, api_key: str):
        openai.api_key = api_key

    def fill_slots(self, template: Dict, text: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ slot‚Äë–∞–º–∏.

        –°–µ–π—á–∞—Å —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º–æ–∫. –í —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏:
        1) –ø—Ä–æ–º–ø—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–≥–∏–π JSON‚Äë–æ—Ç–≤–µ—Ç;
        2) –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ slot_schema;
        3) –¥–µ–ª–∞–µ–º fallback¬†/ generative –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        schema = template.get("slot_schema", {})
        # --- MOCK ----------------------------------------------------------------
        if "character" in schema and "faction" in schema:
            return {"character": "–ê—Ä–µ–Ω", "faction": "–°–µ–≤–µ—Ä–Ω—ã–π —Ñ—Ä–æ–Ω—Ç"}
        # -------------------------------------------------------------------------
        return {k: f"mock_{k}" for k in schema.keys()}


# =============================================================================
# üìÅ app/services/extraction.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –†–µ–∞–ª–∏–∑—É–µ—Ç ExtractionPipeline, —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –∏–∑ README ¬ß3
#  ‚Ä¢ –ù–∞ –≤—ã—Ö–æ–¥–µ¬†‚Äî —Ñ–∞–∫—Ç—ã + ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
# =============================================================================

from typing import Tuple, List, Dict, Any


class ExtractionPipeline:
    """–°–≤—è–∑—ã–≤–∞–µ—Ç TemplateService¬†‚Üí SlotFiller¬†‚Üí GraphProxy."""

    def __init__(
        self,
        template_service: TemplateService,
        slot_filler: SlotFiller,
        graph_proxy: GraphProxy,
    ):
        self.template_service = template_service
        self.slot_filler = slot_filler
        self.graph_proxy = graph_proxy

    # --- –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ -------------------------------------------------------
    def run(
        self, text: str, chapter: int, tags: List[str] | None = None
    ) -> Tuple[List[Dict[str, Any]], List[str]]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —ç–Ω–¥‚Äë–ø–æ–π–Ω—Ç–∞ `/v1/extract-save`.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        ‚Ä¢ facts ‚Äî —Å–ø–∏—Å–æ–∫ dict‚Äë–æ–≤ (–ª–æ–≥, –ø—Ä–∏–≥–æ–¥–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ UI)
        ‚Ä¢ inserted_ids ‚Äî ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤/—Ñ–∞–∫—Ç–æ–≤
        """
        templates = self.template_service.find_templates(text)
        all_facts: List[Dict] = []
        inserted: List[str] = []

        for tpl in templates:
            # 1. –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ—Ç—ã
            slots = self.slot_filler.fill_slots(tpl, text)
            # 2. –†–µ–Ω–¥–µ—Ä–∏–º Cypher (–ø–æ–∫–∞¬†‚Äî –ø—Å–µ–≤–¥–æ)
            cypher = self._render_cypher(tpl, slots, chapter, tags)
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥—Ä–∞—Ñ
            result = self.graph_proxy.run_query(cypher)
            # 4. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_facts.append({"template": tpl["id"], "slots": slots})
            inserted.extend([r.get("id") for r in result if "id" in r])

        return all_facts, inserted

    # --- –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ------------------------------------------------------
    def _render_cypher(
        self,
        template: Dict,
        slots: Dict,
        chapter: int,
        tags: List[str] | None,
    ) -> str:
        """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ—Ç—ã –≤ Cypher Jinja2‚Äë—à–∞–±–ª–æ–Ω.

        üéØ –í –ø—Ä–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Jinja2 ‚Äì —Å–º. utils/jinja.py.
        """
        return f"// Cypher for template={template['id']} slots={slots}"


# =============================================================================
# üìÅ app/core/router.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
#    ‚Üí /v1/extract-save  (–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ /v1/augment-context)
# =============================================================================

from fastapi import FastAPI, Depends
from app.schemas.extract import ExtractRequest, ExtractResponse

app = FastAPI(
    title="StoryGraph API",
    description=(
        "Backend‚Äë—Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è. "
        "–°–º. README.md –∏ specification.md."
    ),
    version="0.1.0",
)

# === DI‚Äësingletons (—Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —Ä–∞–∑) ========================================
template_service = TemplateService(app_settings.WEAVIATE_URL)
slot_filler = SlotFiller(app_settings.OPENAI_API_KEY)
graph_proxy = GraphProxy(
    app_settings.NEO4J_URI, app_settings.NEO4J_USER, app_settings.NEO4J_PASSWORD
)
extraction_pipeline = ExtractionPipeline(template_service, slot_filler, graph_proxy)


# === Endpoints ===============================================================
@app.post("/v1/extract-save", response_model=ExtractResponse)
def extract_save(
    request: ExtractRequest,
    _: str = Depends(get_token_header),
) -> ExtractResponse:
    """–ú–∞—Ä—à—Ä—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç spec ¬´/v1/extract-save¬ª.

    ‚Üó  orchestrates: TemplateService ‚Üí SlotFiller ‚Üí GraphProxy
    ‚Üò  returns: —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤ + ID –≤—Å—Ç–∞–≤–æ–∫
    """
    facts, ids = extraction_pipeline.extract_and_save(
        request.text, request.chapter, request.tags
    )
    return ExtractResponse(facts=facts, inserted_ids=ids)


# =============================================================================
# üìÅ app/main.py
# -----------------------------------------------------------------------------
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# ----------
#  ‚Ä¢ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Uvicorn. –ü—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º `app` –∏–∑ router.
# =============================================================================

from app.core.router import app  # noqa: F401  (re‚Äëexport for Uvicorn)


# =============================================================================
# üìÑ Dockerfile  (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
# -----------------------------------------------------------------------------
# –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
# -----------------
#  ‚Ä¢ –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ python:3.11‚Äëslim
#  ‚Ä¢ –ö—ç—à–∏—Ä—É–µ—Ç—Å—è requirements.txt
#  ‚Ä¢ –ó–∞–ø—É—Å–∫–∞–µ—Ç Uvicorn
# =============================================================================

"""
FROM python:3.11-slim
WORKDIR /app
COPY . .
RUN pip install --no-cache-dir -r requirements.txt
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
"""


# =============================================================================
# üìÑ docker-compose.yml  (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
# -----------------------------------------------------------------------------
# –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
# -----------------
#  ‚Ä¢ –ü–æ–¥–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä StoryGraph
#  ‚Ä¢ –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç 8000
#  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç .env –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤
# =============================================================================

"""
version: "3.9"
services:
  storygraph:
    build: .
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
"""


# =============================================================================
# üìÑ .env  (–ø—Ä–∏–º–µ—Ä, –∫–æ—Ä–µ–Ω—å)
# -----------------------------------------------------------------------------
# –°–æ–¥–µ—Ä–∂–∏—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ; **–Ω–µ** –∫–æ–º–º–∏—Ç–∏—Ç—å –≤ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
# =============================================================================

"""
OPENAI_API_KEY=sk-*************
NEO4J_URI=bolt://neo4j:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=pass
WEAVIATE_URL=http://weaviate:8080
AUTH_TOKEN=super-secret-token
DEBUG=true
"""
