"""
app/services/slot_filler.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç SlotFiller ‚Äï ¬´–∫–ª–µ–π¬ª –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏ CypherTemplate.

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç + CypherTemplate
‚Ä¢ –ü—Ä–æ–≥–æ–Ω—è–µ—Ç 3 —Ñ–∞–∑—ã (extract ‚Üí fallback ‚Üí generate)
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **—Å–ø–∏—Å–æ–∫** –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∏–¥–∞
  {
    "template_id": "...",
    "slots": {...},       # –≥–æ—Ç–æ–≤–æ –¥–ª—è template.render()
    "details": "chain-of-thought"
  }

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
  ‚Äì LangChain + OpenAI (Structured JSON)
  ‚Äì Jinja2 –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ (app/prompts/*.j2)
  ‚Äì Pydantic –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  ‚Äì (–æ–ø—Ü.) Langfuse –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏

–®–∞–±–ª–æ–Ω—ã-–ø—Ä–æ–º–ø—Ç—ã –æ–∂–∏–¥–∞—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
  ‚Ä¢ template      (CypherTemplate, –Ω—É–∂–µ–Ω description –∏ –¥—Ä.)
  ‚Ä¢ text          (—Å—ã—Ä–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç)
  ‚Ä¢ slots         (List[SlotDefinition])
  ‚Ä¢ slot_names    (List[str])
  ‚Ä¢ previous      (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ø—Ä–æ—à–ª–æ–π —Ñ–∞–∑—ã)
"""

from __future__ import annotations

from typing import Any, Dict, List, Optional

import langfuse
import openai
from langchain_openai import ChatOpenAI
from langchain.output_parsers import PydanticOutputParser
from langchain.prompts import PromptTemplate
from pydantic import BaseModel, ValidationError, create_model, RootModel

from core.slots.prompts import PROMPTS_ENV
from schemas.cypher import CypherTemplate
from utils.logger import get_logger


logger = get_logger(__name__)



# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑ SlotDefinition ‚Üí —Ä–µ–∞–ª—å–Ω—ã–µ Python-—Ç–∏–ø—ã
TYPE_MAP = {
    "STRING": str,
    "INT": int,
    "FLOAT": float,
    "BOOL": bool,
}

from pydantic import BaseModel, Field
from typing import Optional, List

def build_slot_model(template: CypherTemplate) -> type[BaseModel]:
    fields = {
        slot.name: (TYPE_MAP[slot.type], Field(description=slot.description or "..."))
        for slot in template.slots
    }
    fields["details"] = (str, Field(description="–ö–∞–∫ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è"))
    return create_model("ResponseItem", **fields)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# SlotFiller
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class SlotFiller:
    """–ö–ª–∞—Å—Å, –∏–∑–≤–ª–µ–∫–∞—é—â–∏–π / –¥–æ–ø–æ–ª–Ω—è—é—â–∏–π –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM."""

    # ------------------------------------------------------------------ init --
    def __init__(
        self,
        api_key: str,
        model_name: str = "gpt-4o-mini",
        temperature: float = 0.2,
        langfuse_client: Optional[langfuse.Langfuse] = None,
    ):
        """
        Parameters
        ----------
        api_key : str
            OpenAI API-–∫–ª—é—á.
        model_name : str
            –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o-mini).
        temperature : float
            –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è LLM (–Ω–∏–∑–∫–∞—è, —á—Ç–æ–±—ã –±—ã—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º).
        langfuse_client : Optional[langfuse.Langfuse]
            –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Langfuse –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏.
        """
        openai.api_key = api_key
        self.llm = ChatOpenAI(
            model_name=model_name,
            temperature=temperature,
            openai_api_key=api_key,
        )
        self.tracer = langfuse_client

    # ----------------------------------------------------------- public API --
    def fill_slots(self, template: CypherTemplate, text: str) -> List[Dict[str, Any]]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –∏–∑ ExtractionPipeline.

        Returns
        -------
        List[Dict[str, Any]]
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º).
        """
        # ‚ûä EXTRACT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        fillings = self._run_phase(
            phase="extract",
            prompt_file="extract_slots.j2",
            template=template,
            text=text,
        )

        # ‚ûã FALLBACK –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if self._needs_fallback(fillings, template):
            fillings = self._run_phase(
                phase="fallback",
                prompt_file="fallback_slots.j2",
                template=template,
                text=text,
                previous=fillings,
            )

        # ‚ûå GENERATE –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        fillings = self._run_phase(
            phase="generate",
            prompt_file="generate_slots.j2",
            template=template,
            text=text,
            previous=fillings,
        )

        # ‚ûç –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è + –∫–∞—Å—Ç —Ç–∏–ø–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        validated: List[Dict[str, Any]] = []
        for item in fillings:
            try:
                validated.append(
                    {
                        "template_id": template.id,
                        "slots": self._validate_and_cast(item, template),
                        "details": item.get("details", ""),
                    }
                )
            except (ValueError, ValidationError):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç, –Ω–æ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
                continue

        return validated

    # ---------------------------------------------------- internal helpers --
    def _run_phase(
        self,
        phase: str,
        prompt_file: str,
        template: CypherTemplate,
        text: str,
        previous: Optional[List[Dict[str, Any]]] = None,
    ) -> List[Dict[str, Any]]:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä—ë—Ö —Ñ–∞–∑ (extract / fallback / generate).
        """
        if phase != "extract" and not self._needs_fallback(previous, template):
            return previous or []

        slot_names = [s.name for s in template.slots]

        ItemModel = build_slot_model(template)

        # 2. –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
        class ResponseList(RootModel[List[ItemModel]]):
            pass

        parser = PydanticOutputParser(pydantic_object=ResponseList)
        format_instructions = parser.get_format_instructions()

        # üìÑ 2. –†–µ–Ω–¥–µ—Ä–∏–º Jinja-–ø—Ä–æ–º–ø—Ç
        tpl = PROMPTS_ENV.get_template(prompt_file)
        rendered = tpl.render(
            template=template,
            text=text,
            slots=template.slots,
            slot_names=slot_names,
            previous=previous,
        )

        # üß† 3. –°–æ–∑–¥–∞—ë–º LangChain Prompt
        prompt = PromptTemplate(
            template=rendered + "\n\n{format_instructions}",
            input_variables=["format_instructions"],
            partial_variables={"format_instructions": format_instructions},
        )

        chain = prompt | self.llm | parser

        # üß™ 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Å Langfuse
        span = self.tracer.span(name=f"slotfiller.{phase}") if self.tracer else None
        try:
            result = chain.invoke({})
        except Exception:
            try:
                result = chain.invoke({})
            except Exception as e:
                logger.error(f"Error in phase {phase}: {str(e)}")
                raise
        finally:
            if span:
                span.end()
    
        return result.model_dump()

    # --------------------------------------------------------------------
    @staticmethod
    def _needs_fallback(
        fillings: Optional[List[Dict[str, Any]]], template: CypherTemplate
    ) -> bool:
        """True, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."""
        if not fillings:
            return True
        required = {s.name for s in template.slots if s.required}
        for obj in fillings:
            if not required.issubset(obj.keys()):
                return True
        return False

    # --------------------------------------------------------------------
    def _validate_and_cast(
        self, obj: Dict[str, Any], template: CypherTemplate
    ) -> Dict[str, Any]:
        """
        –°—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é Pydantic-–º–æ–¥–µ–ª—å
        –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Ç–∏–ø—ã —Å–æ–≥–ª–∞—Å–Ω–æ SlotDefinition.type.
        """
        # 1) —Å—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é Pydantic-—Å—Ö–µ–º—É
        fields = {
            s.name: (TYPE_MAP[s.type], ... if s.required else None)
            for s in template.slots
        }
        DynamicModel: type[BaseModel] = create_model("DynamicSlotsModel", **fields)  # type: ignore

        # 2) —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏ (–ª–∏—à–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
        filtered = {k: obj.get(k) for k in fields.keys() if k in obj}

        # 3) –≤–∞–ª–∏–¥–∞—Ü–∏—è + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞—Å—Ç —Ç–∏–ø–æ–≤
        validated: BaseModel = DynamicModel(**filtered)
        return validated.model_dump()
