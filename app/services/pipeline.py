
from typing import Tuple, List, Dict, Any

from services.graph_proxy import GraphProxy
from services.slot_filler import SlotFiller
from services.template_service import TemplateService
from schemas.cypher import CypherTemplate


class ExtractionPipeline:
    """–°–≤—è–∑—ã–≤–∞–µ—Ç TemplateService¬†‚Üí SlotFiller¬†‚Üí GraphProxy."""

    def __init__(
        self,
        template_service: TemplateService,
        slot_filler: SlotFiller,
        graph_proxy: GraphProxy,
    ):
        self.template_service = template_service
        self.slot_filler = slot_filler
        self.graph_proxy = graph_proxy

    # --- –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ -------------------------------------------------------
    def extract_and_save(
        self, text: str, chapter: int, tags: List[str] | None = None
    ) -> Tuple[List[Dict[str, Any]], List[str]]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —ç–Ω–¥‚Äë–ø–æ–π–Ω—Ç–∞ `/v1/extract-save`.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        ‚Ä¢ facts ‚Äî —Å–ø–∏—Å–æ–∫ dict‚Äë–æ–≤ (–ª–æ–≥, –ø—Ä–∏–≥–æ–¥–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ UI)
        ‚Ä¢ inserted_ids ‚Äî ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤/—Ñ–∞–∫—Ç–æ–≤
        """
        templates = self.template_service.find_templates(text)
        all_facts: List[Dict] = []
        inserted: List[str] = []

        for tpl in templates:
            # 1. –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ—Ç—ã
            slots = self.slot_filler.fill_slots(tpl, text)
            # 2. –†–µ–Ω–¥–µ—Ä–∏–º Cypher (–ø–æ–∫–∞¬†‚Äî –ø—Å–µ–≤–¥–æ)
            cypher = self._render_cypher(tpl, slots, chapter, tags)
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥—Ä–∞—Ñ
            result = self.graph_proxy.run_query(cypher)
            # 4. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_facts.append({"template": tpl["id"], "slots": slots})
            inserted.extend([r.get("id") for r in result if "id" in r])

        return all_facts, inserted

    # --- –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ------------------------------------------------------
    def _render_cypher(
        self,
        template: CypherTemplate,
        slots: Dict,
        chapter: int,
        tags: List[str] | None,
    ) -> str:
        """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ—Ç—ã –≤ Cypher Jinja2‚Äë—à–∞–±–ª–æ–Ω.

        üéØ –í –ø—Ä–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Jinja2 ‚Äì —Å–º. utils/jinja.py.
        """
        return f"// Cypher for template={template['id']} slots={slots}"


extract_pipeline = ExtractionPipeline()
