# storygraph_service_prototype.py – v0.2 (SpaCy version)
"""Prototype service *без* RuleExtractor.
Используем spaCy NER для извлечения сущностей (Character, Location, Trait) +
LLM‑fallback для всех незаполненных слотов.
"""
from __future__ import annotations

import os, uuid, re
from typing import List, Dict, Any

from fastapi import FastAPI, Depends, HTTPException, Header
from pydantic import BaseModel

# -----------------------------------------------------------------------------
# CONFIG
# -----------------------------------------------------------------------------
AUTH_TOKEN = os.getenv("AUTH_TOKEN", "SUPERSECRET123")

# -----------------------------------------------------------------------------
# DTOs
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# AUTH
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# Template store (unchanged)
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# Mock LLM helpers (replace later)
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Slot‑fill orchestrator
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Graph proxy mock
# -----------------------------------------------------------------------------
class GraphProxy:
    def batch_run(self, stmts: List[str]):
        for s in stmts:
            print("--- CYPHER ---\n", s)
        return len(stmts)

graph_proxy = GraphProxy()

# -----------------------------------------------------------------------------
# Pipelines
# -----------------------------------------------------------------------------

class AugmentPipeline:
    def run(self, text: str, meta: Dict[str, Any]):
        ctx = {"note":"context build TBD"}
        return AugmentCtxOut(context=ctx, trace_id=str(uuid.uuid4()))

augment_pipeline = AugmentPipeline()

# -----------------------------------------------------------------------------
# FastAPI wiring
# -----------------------------------------------------------------------------
